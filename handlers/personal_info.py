from aiogram import Router, types
from aiogram.dispatcher.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from database import get_user_courses, get_course_progress  # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î

router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
@router.message(lambda message: message.text.lower() == "–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def personal_info_menu(message: types.Message):
    """–ú–µ–Ω—é –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞."""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        KeyboardButton(text="–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏"),
        KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    )
    await message.answer(
        MESSAGES["personal_info"]["welcome"],
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏"
@router.message(lambda message: message.text.lower() == "–º–æ–∏ –ø–æ–∫—É–ø–∫–∏")
async def show_purchases(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤."""
    user_id = message.from_user.id
    courses = get_user_courses(user_id)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ –∏–∑ –ë–î

    if not courses:
        await message.answer(MESSAGES["personal_info"]["no_purchases"])
        return

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for course in courses:
        keyboard.add(KeyboardButton(text=course["title"]))

    await message.answer(
        MESSAGES["personal_info"]["purchases_list"],
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫—É—Ä—Å–∞
@router.message(lambda message: any(
    course["title"].lower() in message.text.lower() for course in get_user_courses(message.from_user.id)))
async def show_course_progress(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫—É—Ä—Å—É."""
    user_id = message.from_user.id
    course_title = message.text
    course = next(course for course in get_user_courses(user_id) if course["title"] == course_title)
    progress = get_course_progress(user_id, course["id"])  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ –ë–î

    if not progress:
        await message.answer(MESSAGES["personal_info"]["no_progress"])
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    text = (
        f"üìö {progress['course_title']}\n\n"
        f"–£—Ä–æ–∫–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {progress['completed_lessons']}/{progress['total_lessons']}\n"
        f"–í–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {progress['completed_questions']}/{progress['total_questions']}"
    )
    await message.answer(text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
@router.message(lambda message: message.text.lower() == "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞."""
    # –ü—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"),
        KeyboardButton(text="–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å")
    )
    await message.answer(MESSAGES["personal_info"]["settings"], reply_markup=keyboard)


# –ü—Ä–∏–º–µ—Ä –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
MESSAGES = {
    "main_menu": {
        "welcome": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
    },
    "personal_info": {
        "welcome": "–í—ã –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        "no_purchases": "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.",
        "purchases_list": "–í–∞—à–∏ –ø—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω–Ω—ã–µ –∫—É—Ä—Å—ã:",
        "no_progress": "–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —ç—Ç–æ–º—É –∫—É—Ä—Å—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.",
        "settings": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞:"
    }
}
