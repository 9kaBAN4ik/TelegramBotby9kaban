from aiogram import Router, types
from io import BytesIO
import time
import base64
import aiohttp
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, \
    KeyboardButton, InputFile
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from database import get_product_list, get_user_role, purchase_product, add_product_to_db, get_all_products, \
    get_product_by_code, get_product_by_id
from aiogram.filters.state import StateFilter
from messages import *
from math import ceil
from bot import bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ bot, –µ—Å–ª–∏ –æ–Ω –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –¥—Ä—É–≥–æ–º —Ñ–∞–π–ª–µ

router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
class AddProductForm(StatesGroup):
    name = State()  # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    description = State()  # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    price = State()# –¶–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
    image = State()
    category = State()
    is_subscription = State()  # –ü—Ä–∏–∑–Ω–∞–∫ –ø–æ–¥–ø–∏—Å–∫–∏
    subscription_period = State()  # –ü–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏
    is_hidden = State()  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    search_product_by_code = State()


ITEMS_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ


@router.message(lambda message: message.text == "–ü—Ä–æ–¥—É–∫—Ç—ã")
async def products(message: Message, state: FSMContext):
    user_role = await get_user_role(message.from_user.id)
    buttons = [
        [KeyboardButton(text="–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç")],
    ]
    if user_role == 'partner':
        buttons.append([KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç")])
    buttons.append([KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])

    # –£–∫–∞–∑—ã–≤–∞–µ–º 'keyboard' –∫–∞–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç")
@router.message(lambda message: message.text == "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç" or message.text == "Buy Product")
async def buy_product(message: Message):
    await send_product_page(message.chat.id, 1)  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

async def send_product_page(chat_id, page: int):
    products = get_all_products()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–∫—Ä—ã—Ç—ã
    visible_products = [p for p in products if not p.get("is_hidden", False)]

    total_pages = ceil(len(visible_products) / ITEMS_PER_PAGE)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    start_index = (page - 1) * ITEMS_PER_PAGE
    end_index = start_index + ITEMS_PER_PAGE
    products_to_show = visible_products[start_index:end_index]

    text = "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:\n\n"
    for product in products_to_show:
        name = product["name"] if not product.get("is_personal") else "–ü—Ä–æ–¥—É–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∫–æ–¥—É"
        text += f"üîπ {name} ‚Äî {product['price']} VED\n"

    keyboard_buttons = []

    for product in products_to_show:
        button_text = f"‚Ñπ {product['name']} - {product['price']} VED"
        callback_data = f"product_info_{product['id']}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞
        keyboard_buttons.append(InlineKeyboardButton(text=button_text, callback_data=callback_data))

    navigation_buttons = []
    if page > 1:
        navigation_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è Previous", callback_data=f"page_{page-1}"))
    if page < total_pages:
        navigation_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è Next", callback_data=f"page_{page+1}"))

    keyboard_buttons.extend(navigation_buttons)
    keyboard_buttons.append(InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É", callback_data="search_product_by_code"))

    keyboard = InlineKeyboardMarkup(inline_keyboard=[keyboard_buttons])

    await bot.send_message(chat_id, text, reply_markup=keyboard)

# –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
@router.message(lambda message: message.text == "‚¨ÖÔ∏è Previous" or message.text == "‚û°Ô∏è Next")
async def paginate_products(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥
    user_data = await state.get_data()
    current_page = user_data.get("current_page", 1)

    if message.text == "‚¨ÖÔ∏è Previous":
        current_page -= 1
    elif message.text == "‚û°Ô∏è Next":
        current_page += 1

    await state.update_data(current_page=current_page)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    await send_product_page(message.chat.id, current_page)


@router.callback_query(lambda callback: callback.data == "search_product_by_code")
async def search_product_by_code_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.")  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–∞
    await state.set_state("search_product_by_code")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –æ–∂–∏–¥–∞—Ç—å –∫–æ–¥
    await callback.answer()  # –û—Ç–≤–µ—Ç –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É


@router.message(StateFilter("search_product_by_code"))
async def search_product_by_code_input(message: Message, state: FSMContext):
    product_code = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –ø–æ –∫–æ–¥—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    product = get_product_by_code(product_code)

    if product:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
        text = (
            f"üì¶ <b>{product['name']}</b>\n\n"
            f"{product['description']}\n\n"
            f"üí∞ –¶–µ–Ω–∞: {product['price']} VED"
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if product["image"]:
            await message.answer_photo(product["image"], caption=text, parse_mode="HTML")
        else:
            await message.answer(text, parse_mode="HTML")
    else:
        await message.answer(f"‚ùå –ü—Ä–æ–¥—É–∫—Ç —Å –∫–æ–¥–æ–º {product_code} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç"
@router.message(lambda message: message.text in ["–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", "Add Product"])
async def add_product(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_role = await get_user_role(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º
    if user_role != 'partner':
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")
        return

    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:")
    await state.set_state(AddProductForm.name)

# –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
@router.message(AddProductForm.name)
async def add_product_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:")
    await state.set_state(AddProductForm.description)

@router.message(AddProductForm.description)
async def add_product_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)

    # –î–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ä–µ—Ç—Ä–∏—Ç", callback_data="category_retreat")],
            [InlineKeyboardButton(text="–û–Ω–ª–∞–π–Ω-—Å–µ—Å—Å–∏—è —Å —Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–º", callback_data="category_session")],
            [InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="category_other")],
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞:", reply_markup=keyboard)
    await state.set_state(AddProductForm.category)

@router.callback_query(lambda callback: callback.data.startswith("category_"))
async def add_product_category(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    await state.update_data(category=category)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞ (–≤ VED):")
    await state.set_state(AddProductForm.price)

# –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–∞
@router.message(AddProductForm.price)
async def add_product_price(message: Message, state: FSMContext):
    try:
        price = float(message.text)
        await state.update_data(price=price)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:")
        await state.set_state(AddProductForm.image)

    except ValueError:
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@router.message(AddProductForm.image)
async def add_product_image(message: Message, state: FSMContext):
    if not message.photo:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    file_id = photo.file_id
    await state.update_data(image=file_id)

    await message.answer("–≠—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞? (–¥–∞/–Ω–µ—Ç)")
    await state.set_state(AddProductForm.is_subscription)

# –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (—è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–¥—É–∫—Ç –ø–æ–¥–ø–∏—Å–∫–æ–π)
@router.message(AddProductForm.is_subscription)
async def add_is_subscription(message: Message, state: FSMContext):
    is_subscription = message.text.strip().lower()

    if is_subscription == "–¥–∞":
        await state.update_data(is_subscription=True)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –º–µ—Å—è—Ü–∞—Ö:")
        await state.set_state(AddProductForm.subscription_period)
    elif is_subscription == "–Ω–µ—Ç":
        await state.update_data(is_subscription=False)
        await ask_hide_product(message, state)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")

# –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@router.message(AddProductForm.subscription_period)
async def add_subscription_period(message: Message, state: FSMContext):
    try:
        period = int(message.text)
        if period <= 0:
            raise ValueError

        await state.update_data(subscription_period=period)
        await ask_hide_product(message, state)
    except ValueError:
        await message.answer("–ü–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –í–æ–ø—Ä–æ—Å –æ —Å–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
async def ask_hide_product(message: Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–∫—Ä—ã—Ç—å", callback_data="hide_product_yes")],
            [InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –≤–∏–¥–∏–º—ã–º", callback_data="hide_product_no")],
        ]
    )
    await message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫—Ä—ã—Ç—å –ø—Ä–æ–¥—É–∫—Ç?", reply_markup=keyboard)
    await state.set_state(AddProductForm.is_hidden)

@router.callback_query(lambda callback: callback.data.startswith("hide_product_"))
async def set_product_visibility(callback: CallbackQuery, state: FSMContext):
    is_hidden = callback.data == "hide_product_yes"
    await state.update_data(is_hidden=is_hidden)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
    await save_product(callback.message, state)
    visibility = "—Å–∫—Ä—ã—Ç—ã–º" if is_hidden else "–≤–∏–¥–∏–º—ã–º"
    await callback.message.answer(f"–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ {visibility}.")

async def save_product(message: Message, state: FSMContext):
    product_data = await state.get_data()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    image = product_data.get("image")
    is_hidden = product_data.get("is_hidden", False)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
    product_code = f"PRD-{int(time.time())}"

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await add_product_to_db(
        name=product_data["name"],
        description=product_data["description"],
        price=product_data["price"],
        is_subscription=product_data["is_subscription"],
        partner_id=message.from_user.id,
        image=image,
        subscription_period=product_data.get("subscription_period"),
        code=product_code,
        is_hidden=is_hidden
    )

    await message.answer(f"–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–∞: {product_code}")
    await state.clear()



@router.callback_query(lambda callback: callback.data.startswith("product_info_"))
async def product_info_handler(callback: CallbackQuery):
    product_id = int(callback.data.split("_")[2])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞
    product = get_product_by_id(product_id)  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID

    if product:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä—ã—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        if product["is_hidden"]:
            await callback.message.answer("‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç —Å–∫—Ä—ã—Ç.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
        text = (
            f"üì¶ <b>{product['name']}</b>\n\n"
            f"{product['description']}\n\n"
            f"üí∞ –¶–µ–Ω–∞: {product['price']} VED"
        )
        if product["image"]:
            await callback.message.answer_photo(product["image"], caption=text, parse_mode="HTML")
        else:
            await callback.message.answer(text, parse_mode="HTML")
    else:
        await callback.message.answer("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")




@router.callback_query(lambda callback: callback.data.startswith("page_"))
async def pagination_handler(callback: CallbackQuery):
    page = int(callback.data.split("_")[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await send_product_page(callback.message.chat.id, page)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤
